"use strict";

(function () {
    var dropdowns = Array.prototype.slice.call(document.querySelectorAll('.bg-dropdown'));

    function isIE() {
        var ua = navigator.userAgent;
        var is_ie = ua.indexOf('MSIE ') > -1 || ua.indexOf('Trident/') > -1;
        return is_ie;
    }

    dropdowns.forEach(function (dropdown) {
        if (isIE()) {
            dropdown.classList.add('no-show-pseudo');
        }
    });
})();
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var BgOtp =
/*#__PURE__*/
function () {
    function BgOtp() {
        _classCallCheck(this, BgOtp);

        this.recordCode = [];
        this.otpContainer = document.querySelector('.bg-otp');
        this.secret = document.querySelector('.bg-otp [type=hidden]');

        if (this.otpContainer) {
            this.childs = Array.prototype.slice.call(this.otpContainer.children);

            this._initOtp();
        }
    }

    _createClass(BgOtp, [{
        key: "_initOtp",
        value: function _initOtp() {
            var _this = this;

            this.childs.pop();
            this.childs.forEach(function (child, index) {
                return child.setAttribute('data-index', index);
            });
            this.childs.forEach(function (child) {
                return child.addEventListener('keyup', _this._changeBox.bind(_this));
            });
            this.childs.forEach(function (child) {
                return child.addEventListener('keydown', _this._cancelTab.bind(_this));
            });
            this.childs[0].focus();
            this.otpContainer.addEventListener('click', function () {
                if (_this.recordCode.length === 0) {
                    _this.childs[0].focus();
                } else if (_this.recordCode.length === _this.childs.length) {
                    _this.childs[_this.recordCode.length - 1].focus();
                } else {
                    _this.childs[_this.recordCode.length].focus();
                }
            });
        }
    }, {
        key: "_cancelTab",
        value: function _cancelTab(e) {
            if (e.keyCode === 9) {
                e.preventDefault();
            }
        }
    }, {
        key: "reset",
        value: function reset() {
            this.childs.forEach(function (child) {
                child.value = '';
            });
            this.recordCode = [];
            this.childs[0].focus();
        }
    }, {
        key: "_changeBox",
        value: function _changeBox(e) {
            if (e.keyCode === 8) {
                this.recordCode.pop();
                this.childs[this.recordCode.length].value = '';
                this.childs[this.recordCode.length].focus();
                this.secret.value = this.recordCode.join('');
            } else {
                var index = +e.target.dataset.index;

                if (this.recordCode.length < this.childs.length) {
                    if (e.target.value !== '') {
                        //Send focus to the next input
                        if (this.childs[index + 1]) {
                            this.childs[index + 1].focus();
                        }

                        this.recordCode.push(e.target.value);
                    }
                }

                this.secret.value = this.recordCode.join('');
            }
        }
    }]);

    return BgOtp;
}();

var bgotp = new BgOtp();
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var BgProgress =
/*#__PURE__*/
function () {
    function BgProgress() {
        _classCallCheck(this, BgProgress);

        this._initialLoad();
    }

    _createClass(BgProgress, [{
        key: "_initialLoad",
        value: function _initialLoad() {
            var _this = this;

            this.progressNodes = Array.prototype.slice.call(document.querySelectorAll('.bg-progress'));

            if (this.progressNodes) {
                this.progressNodes.forEach(function (progress) {
                    var percent = parseInt(progress.getAttribute('data-progress'));
                    var value = progress.getAttribute('data-value');
                    _this.node = document.createElement('div');
                    _this.node.innerHTML = '<span>' + value + '</span>';
                    _this.node.style.width = percent + '%';
                    progress.innerHTML = '';
                    progress.appendChild(_this.node);
                });
            }
        }
    }, {
        key: "refresh",
        value: function refresh() {
            this._initialLoad();
        }
    }]);

    return BgProgress;
}();

var bgprogress = new BgProgress();
"use strict";

(function () {
    var inputsNumbers = Array.prototype.slice.call(document.querySelectorAll('[data-limit]'));

    if (inputsNumbers != null) {
        inputsNumbers.forEach(function (input) {
            var filter = input.getAttribute('data-filter');
            var limit = input.getAttribute('data-limit');

            if (limit > 0) {
                input.oninput = function (e) {
                    if (this.value.length > limit) {
                        this.value = this.value.slice(0, limit);
                    }
                };
            }

            if (filter == 'only-numbers') {
                input.onkeydown = function (e) {
                    if (e.key >= 0 && e.key <= 9 || e.keyCode == 8) { } else {
                        e.preventDefault();
                        this.value = this.value.slice(0, this.value.length);
                    }
                };

                input.addEventListener('mousewheel', function (e) {
                    e.preventDefault();
                });
            } else if (filter == 'only-letters') {
                input.onkeydown = function (e) {
                    if (e.key >= 0 && e.key <= 9) {
                        e.preventDefault();
                        this.value = this.value.slice(0, this.value.length);
                    }
                };
            }
        });
    }
})();
"use strict";

var items = document.querySelectorAll('.bg-expandable');
items = Array.prototype.slice.call(items);
items.forEach(function (item) {
    return item.addEventListener('click', openAccordion);
});

function openAccordion() {
    this.classList.toggle('bg-open');
}
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var BgModal =
/*#__PURE__*/
function () {
    function BgModal() {
        _classCallCheck(this, BgModal);

        this._declareTriggers();
    }

    _createClass(BgModal, [{
        key: "init",
        value: function init() {
            this._declareTriggers();
        }
    }, {
        key: "_declareTriggers",
        value: function _declareTriggers() {
            var triggerModal = Array.prototype.slice.call(document.querySelectorAll('[bg-modal]'));

            if (triggerModal.length > 0) {
                this._createOverlay();

                var global = this;
                triggerModal.forEach(function (trigger) {
                    trigger.addEventListener('click', function (e) {
                        e.preventDefault();
                        var id = this.getAttribute('bg-modal');
                        var modalId = id;
                        var modal = document.getElementById(modalId);
                        var overlay = document.querySelector('.bg-overlay');

                        if (modal.classList.contains('bg-show')) {
                            global._hideModal(modal, overlay);
                        } else {
                            global._showModal(modal, overlay);
                        }
                    });
                });
            }
        }
    }, {
        key: "_createOverlay",
        value: function _createOverlay() {
            var overlay = document.createElement('div');
            overlay.classList.add('bg-overlay');
            document.body.appendChild(overlay);
            return overlay;
        }
    }, {
        key: "_hideModal",
        value: function _hideModal(modal, overlay) {
            modal.classList.remove('bg-show');
            modal.classList.add('bg-close');
            overlay.classList.remove('bg-show');
        }
    }, {
        key: "_showModal",
        value: function _showModal(modal, overlay) {
            modal.classList.remove('bg-close');
            modal.classList.add('bg-show');
            overlay.classList.add('bg-show');
            overlay.addEventListener('click', function (e) {
                if (!modal.dataset["static"]) {
                    overlay.classList.remove('bg-show');
                    modal.classList.remove('bg-show');
                }
            });
        }
    }, {
        key: "_getOverlay",
        value: function _getOverlay() {
            var overlay = document.querySelector('.bg-overlay');

            if (overlay) {
                return overlay;
            } else {
                return this._createOverlay();
            }
        }
    }, {
        key: "showModal",
        value: function showModal(modalId) {
            var modal = document.getElementById(modalId);

            if (!modal) {
                throw new Error('No hay Modal para abrir!');
            }

            var overlay = this._getOverlay();

            this._showModal(modal, overlay);
        }
    }, {
        key: "hideModal",
        value: function hideModal(modalId) {
            var modal = document.getElementById(modalId);

            if (!modal) {
                throw new Error('No hay Modal para remover!');
            }

            var overlay = document.querySelector('.bg-overlay');

            this._hideModal(modal, overlay);
        }
    }]);

    return BgModal;
}();

var bgmodal = new BgModal();
"use strict";

(function () {
    var bgLabel = document.querySelectorAll(".bg-label");
    Array.prototype.forEach.call(bgLabel, function (e) {
        e.addEventListener("click", toggleMenu);
        var closed = true;

        function toggleMenu() {
            var _this = this;

            if (closed) {
                this.classList.add("bg-open");
                closed = !closed;
            } else {
                setTimeout(function () {
                    _this.classList.remove("bg-open");
                }, 10);
                closed = !closed;
            }
        }
    });
})();
"use strict";

(function () {
    var codes = Array.prototype.slice.call(document.querySelectorAll('.bg-passcode .bg-button'));
    var textfield = document.querySelector('.bg-passcode-field .bg-textbox');
    var secret = document.querySelector('.bg-passcode-field input[type=hidden]');
    codes.forEach(function (code) {
        code.addEventListener('click', registerNumber);
    });

    function registerNumber(e) {
        if (e.target.classList.contains('erase')) {
            deleteCodeInDisplay();
            secret.value = '';
        } else {
            setCodeinDisplay();
            var element = e.target.querySelector('span');
            secret.value += element.innerHTML;
        }
    }

    function setCodeinDisplay() {
        textfield.value += '*';
    }

    function deleteCodeInDisplay() {
        textfield.value = '';
    }
})();
"use strict";

(function () {
    var bgRadioButton = document.querySelectorAll(".bg-radiobutton");
    Array.prototype.forEach.call(bgRadioButton, function (input) {
        input = document.querySelector(".bg-radiobutton input");
        input.addEventListener("change", inputChanged);

        function inputChanged(e) {
            if (e.target.checked) {
                input.parentNode.parentNode.classList.add("bg-radiobutton-active");
            }

            if (!e.target.checked) {
                console.log("unchecked");
            }
        }
    });
})();
"use strict";

(function () {
    var stepVertical = document.querySelector(".bg-steps-vertical");

    if (stepVertical) {
        var elements = [].slice.call(stepVertical.children);
        var currentIndex = stepVertical.dataset.current;

        for (var i = 0; i < elements.length; i++) {
            var circle = document.createElement("span");
            var line = document.createElement("span");
            circle.classList.add("circle");
            line.classList.add("line");

            if (i + 1 == currentIndex) {
                if (i + 1 == elements.length) {
                    elements[i].classList.add("past");
                    circle.classList.add("past");
                    elements[i].parentNode.insertBefore(circle, elements[i]);
                } else {
                    var progress = document.createElement("span");
                    progress.classList.add("progress");
                    progress.style.display = "inline-block";
                    progress.style.width = "100%";
                    progress.style.backgroundColor = "#00ace4";
                    progress.style.height = "".concat(stepVertical.dataset.percentage, "%");
                    elements[i].classList.add("current");
                    circle.classList.add("current");
                    elements[i].parentNode.insertBefore(circle, elements[i]);
                    line.style.height = "".concat(elements[i].clientHeight - 18, "px");
                    line.appendChild(progress);
                    circle.appendChild(line);
                }
            } else if (i < currentIndex) {
                elements[i].classList.add("past");
                circle.classList.add("past");
                elements[i].parentNode.insertBefore(circle, elements[i]);
                line.style.height = "".concat(elements[i].clientHeight - 18, "px");
                circle.appendChild(line);
            } else {
                elements[i].classList.add("next");
                elements[i].classList.add("current");
                elements[i].parentNode.insertBefore(circle, elements[i]);

                if (i + 1 != elements.length) {
                    line.style.height = "".concat(elements[i].clientHeight - 18, "px");
                    circle.appendChild(line);
                }
            }
        }
    }
})();
"use strict";

(function () {
    var bgSteps = document.querySelector(".bg-steps");

    if (bgSteps) {
        var generateCircles = function generateCircles() {
            var circles = [];

            for (var i = 1; i <= elements; i++) {
                var li = document.createElement("li");

                if (i == currentIndex) {
                    li.classList.add("current");
                } else if (i < currentIndex) {
                    li.classList.add("past");
                } else {
                    li.classList.add("next");
                }

                circles.push(li);
            }

            return circles;
        };

        var elements = bgSteps.dataset.elements;
        var currentIndex = bgSteps.dataset.current;
        var percentage = bgSteps.dataset.percentage;
        generateCircles().forEach(function (el, i, arr) {
            if (i + 1 != arr.length) {
                var span = document.createElement("span");
                span.classList.add(el.className);
                bgSteps.appendChild(el);
                el.parentNode.insertBefore(span, el.nextSibling);

                if (el.className == "current") {
                    var progress = document.createElement("span");
                    progress.style.width = "".concat(percentage, "%");
                    progress.classList.add("progress");
                    span.appendChild(progress);
                }
            } else {
                bgSteps.appendChild(el);

                if (elements == currentIndex) {
                    el.className = "past";
                }
            }
        });
    }
})();
"use strict";

(function () {
    function wrapperFunction(el) {
        var wrapper = document.createElement("div");
        wrapper.style.position = "relative";
        el.parentNode.insertBefore(wrapper, el);
        wrapper.appendChild(el);
    }

    function insertIcon(el) {
        el.insertAdjacentHTML("afterend", "<span class=\"bg-state\"></span>");
    }

    var bgTextfield = document.querySelectorAll(".bg-textfield");
    Array.prototype.forEach.call(bgTextfield, function (bgTextfield) {
        var input = bgTextfield.querySelector(".bg-textbox");
        wrapperFunction(input);
        insertIcon(input);
    });
    var inputs = document.querySelectorAll(".bg-textfield .bg-textbox");
    Array.prototype.forEach.call(inputs, function (input) {
        if (input.dataset.limit && input.dataset.counter == "true") {
            var count = function count(e) {
                var limit = input.dataset.limit;
                var value = limit - e.target.value.length;

                if (value >= 0) {
                    p.innerHTML = "".concat(value, " caracteres");
                    ;
                }
            };

            var p = document.createElement("p");
            p.classList.add("bg-counter");
            p.innerText = "".concat(input.dataset.limit, " caracteres");
            input.parentNode.parentNode.insertBefore(p, input.parentNode.nextSibling);
            input.addEventListener("keyup", count);
            input.addEventListener("change", count);
            input.addEventListener("input", count);
        }
    });
})();